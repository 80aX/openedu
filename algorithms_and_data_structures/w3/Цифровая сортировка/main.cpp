// Цифровая сортировка

// Дано n строк, выведите их порядок после k фаз цифровой сортировки.

// Формат входного файла
// В первой строке входного файла содержатся числа n — число строк, m — их длина 
// и k – число фаз цифровой сортировки (1<=n<=10^6, 1<=k<=m<=10^6, n*m<=5*10^7). 
// Далее находится описание строк, но в нетривиальном формате. Так, i-ая строка 
// (1<=i<=n) записана в i-ых символах второй, …, (m+1)-ой строк входного файла. 
// Иными словами, строки написаны по вертикали. Это сделано специально, чтобы 
// сортировка занимала меньше времени.

// Строки состоят из строчных латинских букв: от символа "a" до символа "z" 
// включительно. В таблице символов ASCII все эти буквы располагаются подряд 
// и в алфавитном порядке, код буквы "a" равен 97, код буквы "z" равен 122.

// Формат выходного файла
// Выведите номера строк в том порядке, в котором они будут после k фаз цифровой 
// сортировки.


#include <fstream>


void radixsort(int **a, int n, int f)
{
    int i;
    int **b = new int * [n + 1];
    int c[27] = {0};
    
    for (i = 1; i < n + 1; ++i)
        c[a[i][f]]++;
    
    for (i = 1; i < 27; ++i)
        c[i] += c[i - 1];
    
    for (i = n; i > 0; --i) {
        b[c[a[i][f]]] = a[i];
        c[a[i][f]]--;
    }
    
    a = b;
    
    delete b;
}


int main()
{
    std::ifstream fin("input.txt");
    std::ofstream fout("output.txt");
    
    int n, m, k, i, j;
    fin >> n >> m >> k;
    int **array = new int * [n + 1];
    
    for (int i = 1; i < n + 1; ++i) {
        array[i] = new int [m + 1];
        array[i][0] = i;
    }
    
    char temp;
    for (i = 1; i < m + 1; ++i) {
        for (j = 1; j < n + 1; ++j) {
            fin >> temp;
            array[j][i] = temp - 96;
        }
    }
    
    for (i = 1; i <= k; ++i)
        radixsort(array, n, m - i + 1);
    
    for (i = 1; i < n + 1; ++i)
        fout << array[i][0] << ' ';
    fout << '\n';
    
    for (i = 1; i < n + 1; ++i)
        delete [] array[i];
    delete [] array;
    
    return 0;
}
