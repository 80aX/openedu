// Сортировка слиянием

// Дан массив целых чисел. Ваша задача — отсортировать его в порядке неубывания с 
// помощью сортировки слиянием.

// Чтобы убедиться, что Вы действительно используете сортировку слиянием, мы просим 
// Вас, после каждого осуществленного слияния (то есть, когда соответствующий подмассив 
// уже отсортирован!), выводить индексы граничных элементов и их значения.

// Формат входного файла
// В первой строке входного файла содержится число n(1<=n<=10^5)  — число элементов в массиве. 
// Во второй строке находятся  целых чисел, по модулю не превосходящих 10^9.

// Формат выходного файла
// Выходной файл состоит из нескольких строк.

// В последней строке выходного файла требуется вывести отсортированный в порядке 
// неубывания массив, данный на входе. Между любыми двумя числами должен стоять ровно 
// один пробел.

// Все предшествующие строки описывают осуществленные слияния, по одному на каждой 
// строке. Каждая такая строка должна содержать по четыре числа: If Il Vf Vl, где If — индекс 
// начала области слияния, Il — индекс конца области слияния, Vf — значение первого 
// элемента области слияния, Vl — значение последнего элемента области слияния.

// Все индексы начинаются с единицы (то есть, 1<=If<=Il<=n). Индексы области слияния должны 
// описывать положение области слияния в исходном массиве! Допускается не выводить 
// информацию о слиянии для подмассива длиной 1, так как он отсортирован по определению.


#include <fstream>


void merge(int *a, int l, int m, int r, std::ofstream &fout)
{
    int i, j, k;
    int lsize = m - l + 1, rsize = r - m;
    int *left_array = new int [lsize];
    int *right_array = new int [rsize];
    
    for (i = 0; i < lsize; ++i)
        left_array[i] = a[l + i];
    for (j = 0; j < rsize; ++j)
        right_array[j] = a[m + 1 + j];
    
    i = 0, j = 0, k = l;
    
    while (i < lsize && j < rsize) {
        if (left_array[i] <= right_array[j])
            a[k++] = left_array[i++];
        else
            a[k++] = right_array[j++];
    }
    
    while (i < lsize)
        a[k++] = left_array[i++];
    while (j < rsize)
        a[k++] = right_array[j++];
    
    fout << l + 1 << ' ' << r + 1 << ' ' << a[l] << ' ' << a[r] << '\n';
    
    delete left_array;
    delete right_array;
}


void mergesort(int *a, int l, int r, std::ofstream &fout)
{
    if (l >= r)
        return;
    
    int m = (r + l) / 2;
    
    mergesort(a, l, m, fout);
    mergesort(a, m + 1, r, fout);
    
    merge(a, l, m, r, fout);
}


int main()
{
    std::ifstream fin("input.txt");
    std::ofstream fout("output.txt");
    
    int n;
    fin >> n;
    int *array = new int [n];
    
    for (int i = 0; i < n; ++i)
        fin >> array[i];
    
    mergesort(array, 0, n - 1, fout);
    
    for (int i = 0; i < n; ++i)
        fout << array[i] << ' ';
    fout << '\n';
    
    delete [] array;
    
    return 0;
}
