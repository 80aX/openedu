// Знакомство с жителями Сортлэнда

// Владелец графства Сортлэнд, граф Бабблсортер, решил познакомиться со своими подданными. 
// Число жителей в графстве нечетно и составляет n, где n может быть достаточно велико, поэтому 
// граф решил ограничиться знакомством с тремя представителями народонаселения: с самым бедным 
// жителем, с жителем, обладающим средним достатком, и с самым богатым жителем.

// Согласно традициям Сортлэнда, считается, что житель обладает средним достатком, если при 
// сортировке жителей по сумме денежных сбережений он оказывается ровно посередине. Известно, 
// что каждый житель графства имеет уникальный идентификационный номер, значение которого 
// расположено в границах от единицы до n. Информация о размере денежных накоплений жителей 
// хранится в массиве  таким образом, что сумма денежных накоплений жителя, обладающего 
// идентификационным номером i, содержится в ячейке M[i]. Помогите секретарю графа мистеру 
// Свопу вычислить идентификационные номера жителей, которые будут приглашены на встречу с графом.

// Формат входного файла
// Первая строка входного файла содержит число жителей n(3<=n<=9999, n нечетно). Вторая строка содержит 
// описание массива M, состоящее из n положительных вещественных чисел, разделенных пробелами. 
// Гарантируется, что все элементы массива M различны, а их значения имеют точность не более двух 
// знаков после запятой и не превышают 10^6.

// Формат выходного файла
// В выходной файл выведите три целых положительных числа, разделенных пробелами — идентификационные 
// номера беднейшего, среднего и самого богатого жителей Сортлэнда.


#include <fstream>


void insertionsort(int n, double *m, int *array)
{
    int i, j, temp_int;
    double temp_dbl;
    
    for (i = 1; i <= n; ++i) {
        for (j = i - 1; j > 0 && m[j] < m[j - 1]; --j) {
            temp_dbl = m[j - 1];
            m[j - 1] = m[j];
            m[j] = temp_dbl;
            
            temp_int = array[j - 1];
            array[j - 1] = array[j];
            array[j] = temp_int;
        }
    }
}


int main()
{
    std::ifstream fin("input.txt");
    std::ofstream fout("output.txt");
    
    int n;
    fin >> n;
    
    double *m = new double [n];
    int *array = new int [n];
    
    for (int i = 0; i < n; ++i) {
        fin >> m[i];
        array[i] = i + 1;
    }
    
    insertionsort(n, m, array);
    
    fout << array[0] << ' ' << array[n / 2] << ' ' << array[n - 1] << '\n';
    
    delete [] m;
    delete [] array;
    
    return 0;
}
