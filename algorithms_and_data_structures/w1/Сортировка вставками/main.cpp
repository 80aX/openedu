// Сортировка вставками

// Дан массив целых чисел. Ваша задача — отсортировать его в порядке неубывания с помощью 
// сортировки вставками.

// Сортировка вставками проходится по всем элементам массива от меньших индексов к большим 
// («слева направо») для каждого элемента определяет его место в предшествующей ему 
// отсортированной части массива и переносит его на это место (возможно, сдвигая некоторые 
// элементы на один индекс вправо). Чтобы проконтролировать, что Вы используете именно 
// сортировку вставками, мы попросим Вас для каждого элемента массива, после того, как он 
// будет обработан, выводить его новый индекс.

// Формат входного файла
// В первой строке входного файла содержится число n (1<=n<=1000) — число элементов в массиве. 
// Во второй строке находятся n различных целых чисел, по модулю не превосходящих .

// Формат выходного файла
// В первой строке выходного файла выведите n чисел. При этом i-ое число равно индексу, на 
// который, в момент обработки его сортировкой вставками, был перемещен i-ый элемент исходного 
// массива. Индексы нумеруются, начиная с единицы. Между любыми двумя числами должен стоять 
// ровно один пробел.

// Во второй строке выходного файла выведите отсортированный массив. Между любыми двумя числами 
// должен стоять ровно один пробел.


#include <fstream>


void insertionsort(int n, int *array, std::ofstream &fout)
{
    int i, j, temp;
    
    for (i = 1; i <= n; ++i) {
        for (j = i - 1; j > 0 && array[j] < array[j - 1]; --j) {
            temp = array[j - 1];
            array[j - 1] = array[j];
            array[j] = temp;
        }
        fout << j + 1 << ' ';
    }
    fout << '\n';
}


int main()
{
    std::ifstream fin("input.txt");
    std::ofstream fout("output.txt");
    
    int n, i;
    fin >> n;
    int array[n];
    
    for (i = 0; i < n; ++i)
        fin >> array[i];
    
    insertionsort(n, array, fout);
    
    for (i = 0; i < n; ++i)
        fout << array[i] << ' ';
    fout << '\n';
    
    return 0;
}
