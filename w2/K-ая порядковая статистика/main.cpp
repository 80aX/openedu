// K-ая порядковая статистика

// Дан массив из  элементов. Какие числа являются k1-ым, (k1+1)-ым, …, k2-ым в порядке
// неубывания в этом массиве?

// Формат входного файла
// В первой строке входного файла содержатся три числа:  — размер массива, а
// также границы интервала k1 и k2, при этом 2<=n<=4*10^7, 1<=k1<=k2<=n, k2-k1<200.

// Во второй строке находятся числа A, B, C, a1, a2, по модулю не превосходящие 10^9. 
// Вы должны получить элементы массива, начиная с третьего, по формуле: ai=A*ai-2+B*ai-1+C. 
// Все вычисления должны производится в 32-битном знаковом типе, переполнения 
// должны игнорироваться.

// Обращаем Ваше внимание, что массив из 4*10^7 32-битных целых чисел занимает в 
// памяти 160 мегабайт! Будьте аккуратны!

// Подсказка: эту задачу лучше всего решать модификацией быстрой сортировки. 
// Однако сортировка массива целиком по времени, скорее всего, не пройдет, 
// поэтому нужно подумать, как модифицировать быструю сортировку, чтобы не 
// сортировать те части массива, которые не нужно сортировать.

// Эту задачу, скорее всего, нельзя решить ни на Python, ни на PyPy. Мы не нашли 
// способа сгенерировать 4*10^7 32-битных целых чисел и при этом уложиться в ограничение 
// по времени. Если у Вас тоже не получается, попробуйте другой язык программирования, 
// например, Cython (расширение файла *.pyx).

// Формат выходного файла
// В первой и единственной строке выходного файла выведите k1-ое, (k1+1)-ое, …, k2-ое в 
// порядке неубывания числа в массиве . Числа разделяйте одним пробелом.


#include <fstream>


int split(int *a, int l, int r)
{
    int x = a[(l + r) / 2];
    int l_index = l, r_index = r, buff;
    
    while (l_index <= r_index) {
        while (a[l_index] < x)
            l_index++;
        while (a[r_index] > x)
            r_index--;
            
        if (l_index <= r_index) {
            buff = a[l_index];
            a[l_index] = a[r_index];
            a[r_index] = buff;
            l_index++;
            r_index--;
        }
    }
    
    return l_index;
}


void quicksort(int *a, int l, int r, int k1, int k2)
{
    if (l == r || l > k2 || r < k1)
        return;
    
    int m = split(a, l, r);
    
    quicksort(a, l, m - 1, k1, k2);
    quicksort(a, m, r, k1, k2);
}


int main()
{
    std::ifstream fin("input.txt");
    std::ofstream fout("output.txt");
    
    int n, k1, k2, i;
    fin >> n >> k1 >> k2;
    int *a = new int [n + 1];
    
    int A, B, C;
    fin >> A >> B >> C >> a[1] >> a[2];
    
    for (i = 3; i <= n; ++i)
        a[i] = A * a[i - 2] + B * a[i - 1] + C;
    
    quicksort(a, 1, n, k1, k2);
    
    for (i = k1; i <= k2; ++i)
        fout << a[i] << ' ';
    fout << '\n';
    
    delete [] a;
    
    return 0;
}
